class Environment

types

public Mode = <BASIC> | <NOISY> | <AMBIENT> | <FAILURE>;
public Side = <LEFT> | <RIGHT>;
Data = real * real

instance variables

-- test data
vals: seq of Data;

-- current test sensor readings
left_value: real := 0;
right_value: real := 0;

-- servo speeds 
left_servo: real := 0;
right_servo: real := 0

operations

-- constructor for Environment
public Environment: Mode ==> Environment
Environment(m) == 
(
	-- instantiate different test data based on parameter
 	cases m:
 		<BASIC> 	-> vals := BASIC,
 		<NOISY> 	-> vals := NOISY,
 		<AMBIENT> -> vals := AMBIENT,
 		<FAILURE> -> vals := FAILURE
 	end;
 	
 	-- initial readings
 	nextValue();			
);

public Step: () ==> ()
Step() == 
(
	-- stop simulation
	if len vals = 0	
	then duration(1e3)(World`done := true)
	else (
		-- load next values
		nextValue();
		
		-- print robot movement based on servo values
		printSpeed()
	)
);

-- read the value of the sensor data for a given side
public getSensorValue: Side ==> real
getSensorValue(s) ==
	if s = <LEFT> 
	then return left_value
	else return right_value;

-- set the servo speed value for the given side
public setServoSpeed: Side * real ==> ()
setServoSpeed(s,v) == 
	if s = <LEFT>
	then left_servo := v
	else right_servo := v;

-- pop values from test data
private nextValue: () ==> ()
nextValue() == (
	let mk_(l,r) = hd vals in (
		left_value := l;
		right_value := r
	); 
	vals := tl vals
);

-- report robot movement based on servo values
private printSpeed: () ==> ()
printSpeed() == (
	IO`print("Environment: ");
	if left_servo = 0 and right_servo = 0 then IO`println("Robot not moving")
	else if abs left_servo = abs right_servo then (
		if left_servo > right_servo then IO`println("Robot turning right on the spot")
		elseif left_servo < right_servo then IO`println("Robot turning left on the spot")
		-- both values the same
		elseif left_servo > 0 then IO`println("Robot going forward")
		else IO`println("Robot going backwards")
	)
	else (
		if left_servo > right_servo 
		then IO`println("Robot turning to the right")
		else IO`println("Robot turning to the left")
	)
)

thread
periodic(10E6, 0, 0, 0)(Step)

sync
mutex(nextValue,getSensorValue);
mutex(printSpeed,setServoSpeed)

values

BASIC = [
	mk_(1,143),
	mk_(1,206),
	mk_(1,233),
	mk_(1,246),
	mk_(1,251),
	mk_(1,252),
	mk_(1,254),
	mk_(0,254),
	mk_(1,254),
	mk_(1,254),
	mk_(9,255),
	mk_(71,255),
	mk_(174,254),
	mk_(254,254),
	mk_(254,252),
	mk_(254,204),
	mk_(254,92),
	mk_(254,1),
	mk_(254,1),
	mk_(255,1),
	mk_(254,1),
	mk_(254,1),
	mk_(254,43),
	mk_(254,114),
	mk_(254,197),
	mk_(254,254),
	mk_(254,254),
	mk_(223,254),
	mk_(141,254),
	mk_(50,254),
	mk_(1,255),
	mk_(1,254),
	mk_(18,254),
	mk_(93,254),
	mk_(177,254),
	mk_(251,254),
	mk_(254,254),
	mk_(254,230),
	mk_(254,119),
	mk_(254,23),
	mk_(254,1),
	mk_(254,1),
	mk_(255,1),
	mk_(254,17),
	mk_(254,76),
	mk_(254,156),
	mk_(254,239),
	mk_(254,254),
	mk_(254,254),
	mk_(187,254)];

NOISY = [
	mk_(1,143),
	mk_(1,206),
	mk_(1,232),
	mk_(1,249),
	mk_(2,254),
	mk_(1,242),
	mk_(1,254),
	mk_(13,242),
	mk_(1,254),
	mk_(1,254),
	mk_(18,251),
	mk_(58,250),
	mk_(168,254),
	mk_(254,254),
	mk_(254,252),
	mk_(255,212),
	mk_(254,97),
	mk_(248,1),
	mk_(252,1),
	mk_(245,11),
	mk_(254,1),
	mk_(254,1),
	mk_(254,32),
	mk_(254,99),
	mk_(246,188),
	mk_(254,245),
	mk_(254,254),
	mk_(231,244),
	mk_(145,254),
	mk_(58,254),
	mk_(1,245),
	mk_(1,254),
	mk_(32,254),
	mk_(100,245),
	mk_(175,241),
	mk_(246,254),
	mk_(250,254),
	mk_(253,244),
	mk_(244,113),
	mk_(254,32),
	mk_(254,1),
	mk_(254,4),
	mk_(250,5),
	mk_(254,27),
	mk_(254,79),
	mk_(254,161),
	mk_(254,243),
	mk_(243,254),
	mk_(254,254),
	mk_(202,254)];

AMBIENT = [
	mk_(43,143),
	mk_(101,206),
	mk_(132,232),
	mk_(144,249),
	mk_(162,254),
	mk_(148,242),
	mk_(152,254),
	mk_(172,242),
	mk_(150,254),
	mk_(156,254),
	mk_(222,251),
	mk_(250,250),
	mk_(252,254),
	mk_(254,254),
	mk_(253,254),
	mk_(251,254),
	mk_(254,254),
	mk_(248,251),
	mk_(252,150),
	mk_(245,170),
	mk_(254,147),
	mk_(254,153),
	mk_(254,148),
	mk_(254,144),
	mk_(246,150),
	mk_(254,148),
	mk_(254,175),
	mk_(254,145),
	mk_(254,163),
	mk_(254,166),
	mk_(250,149),
	mk_(244,163),
	mk_(254,254),
	mk_(254,250),
	mk_(253,244),
	mk_(249,254),
	mk_(241,254),
	mk_(249,254),
	mk_(243,248),
	mk_(245,254),
	mk_(148,254),
	mk_(159,254),
	mk_(152,254),
	mk_(170,254),
	mk_(163,254),
	mk_(163,254),
	mk_(171,254),
	mk_(222,249),
	mk_(254,254),
	mk_(254,254)];

FAILURE = [
	mk_(43,143),
	mk_(101,206),
	mk_(132,232),
	mk_(144,249),
	mk_(162,254),
	mk_(148,242),
	mk_(152,254),
	mk_(172,242),
	mk_(150,254),
	mk_(156,254),
	mk_(222,251),
	mk_(250,250),
	mk_(252,254),
	mk_(254,254),
	mk_(253,254),
	mk_(251,254),
	mk_(254,254),
	mk_(248,251),
	mk_(252,150),
	mk_(245,170),
	mk_(254,147),
	mk_(254,153),
	mk_(254,148),
	mk_(254,144),
	mk_(0,150),
	mk_(0,148),
	mk_(0,175),
	mk_(0,145),
	mk_(0,163),
	mk_(0,166),
	mk_(0,149),
	mk_(0,163),
	mk_(0,254),
	mk_(0,250),
	mk_(0,244),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,248),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,254),
	mk_(0,249),
	mk_(0,254),
	mk_(0,254)];

end Environment